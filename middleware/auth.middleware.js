const jwt = require('jsonwebtoken')
const config = require('config')

module.exports = (req, res, next) =>{ // next позволяет продолжить выполнение запросса
  if (req.method === 'OPTIONS') { // 'OPTIONS' это спецыальные метод который присутствует в rest api который просто проверяет доступностть сервкра, жсли это 'OPTIONS' то все Ок и возвращаем next и продолжаем делать запрос
    return next()
  }
  // дальше если обычный запрос то выполняю все в блоке try/catch, потому как есть возможност что будут ошибки
  try {
    const token = req.headers.authorization.split(' ')[1] // для начала получаем токен из req.headers, дальше у headers есть специальное поле authorization - это строка которую муду передавать с фронтенда коорая выглядит так - 'Bearer TOKEN' которую можно распарсить и получить сам токен, учитывая что это строка то вызываю метод split по пробелу, это будет масив по итогу, и я забираю от туда первый элемент тоисть сам токен (' ')[1]

    if(!token){
      return res.status(401).json({message:'Нет вторизации'}) // если у меня нету token тотогда
    }
    // если token есть то тогда его нужно раскодировать для этого decoded

    const decoded = jwt.verify(token, config.get('jwtSecret'))// verify позволяет раскодировать токен, а вторим параметром нужно предать секретный ключ jwtSecret который был указан в конфиге
    req.user = decoded //раскодированый токен можно положыть в req
    next() //продолжить выполнение запросса
  }catch (e) { // если ошибка то
    res.status(401).json({message:'Нет вторизации'})
  }
}









/*как получать с фронтенда данные пользывателя ?
сделать я могу это по jwt токену потому
то в jwt токен я закодировал UserId,
и это как раз то что нужно, это
значит что я могу добывить определенный
middleware для даного роутера котрый
будет проверять - "ф фвторизирован ли
пользыватель? валидный ли у него jwt?"
если да то получать с него необходимые
данные(это для get запросса)/
(для POST ('/generate')) тоже самое буду
делать в методе generate так как здесь
нужно уже модкльновой ссылки привязать
к пользывателюи для этого и создан
данный middleware
(middleware = это обычная функция
которая позволяэт перехвативать
определенные данные и делать логику
которая описана)
* */